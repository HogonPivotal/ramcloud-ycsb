#!/bin/bash
# This is the top-level script that runs one or more of the YCSB benchmarks
# on RAMCloud.  This script is somewhat brittle right now: not much error
# handling, hardwired configuration information, etc.

# Configuration information you may need to modify:

# Information about the experiments you'd like to run:
# TRANSPORTS:       list of RAMCloud transports to use
# SERVER_MEMORIES:  list of different log sizes to try on the servers, which
#                   determine memory utilization; 1680 supposedly means 75%
#                   utilization and 1450 supposedly means 90% utilization
# CLIENT_COUNTS:    different numbers of clients to try
# WORKLOADS:        YCSB workloads to run (combination of a, b, c, d, and f;
#                   RAMCloud can't currently run with e); must run workload f
#                   before d (not sure why)
# RUNS:             How many different runs to carry out with each setting

TRANSPORTS="dpdk"
SERVER_MEMORIES="20000"
CLIENT_COUNTS="1"
# WORKLOADS="a b c f"
WORKLOADS="a"
RUNS=1

# Machines to use for the runs. Please provide IP addresses for the control
# network.
COORDINATOR="128.110.153.69"
SERVERS="ms0922 ms0902 ms0930 ms0921 ms0939 ms0917 ms0937 ms0936 ms0942 ms0927 ms0903"
CLIENTS="ms0909 ms0935 ms0926 ms0919 ms0906 ms0928 ms0943 ms0901 ms0934 ms0925 ms0912 ms0915 ms0929 ms0940 ms0923"

# Clean the coordinator, servers, and clients when receive SIGINT
function sigint_handler() {
  echo "Stop coordinator: ${COORDINATOR}"
  ssh $COORDINATOR sudo pkill coordinator
  ssh $COORDINATOR sudo rm -f /dev/hugepages/*

  for s in $SERVERS; do
    echo "Stop server: $s"
    ssh $s sudo pkill server
    ssh $s sudo rm -f /dev/hugepages/*
  done

  for s in $CLIENTS; do
    echo "Stop client: $s"
    ssh $s sudo pkill java
    ssh $s sudo rm -f /dev/hugepages/*
  done
  exit 0
}
trap 'sigint_handler' 2

# Top-level directory in which log subdirectories will be created.
TOP_LOG_DIR="logs"

# Current directory, for passing to ssh programs
WD=`pwd`

# Directory containing RAMCloud binaries
RAMCLOUD_BIN="$WD/ramcloud/bin"

TIME=$(date +%Y%m%d%H%M%S)
TOP_LOG_DIR=`pwd`"/logs"
LOG_DIR="$TOP_LOG_DIR/${TIME}$1"
mkdir -p $LOG_DIR
rm $TOP_LOG_DIR/latest
ln -s $LOG_DIR $TOP_LOG_DIR/latest

for TRANSPORT in $TRANSPORTS; do
  if [ "$TRANSPORT" = "dpdk" ]; then
    COORD_LOCATOR="basic+udp:host=$COORDINATOR,port=14246"
    LOCATOR="basic+dpdk:"
  else
    echo Unsupported transport $TRANSPORT
    exit 1
  fi

  for SERVER_MEMORY in $SERVER_MEMORIES; do
    for ((RUN=1; RUN<=$RUNS; RUN++)); do
      for CLIENT_COUNT in $CLIENT_COUNTS; do
        LOG_SUBDIR="$LOG_DIR/$TRANSPORT""_$SERVER_MEMORY""_$CLIENT_COUNT""clients_run$RUN"
        mkdir -p $LOG_SUBDIR

        # Start Servers
        echo "Starting coordinator for run $RUN..."
          CMD="sudo $RAMCLOUD_BIN/coordinator \
            -C $COORD_LOCATOR \
            -d 10000 \
            --clusterName=__unnamed__ \
            > $LOG_SUBDIR/coordinator.log 2>&1"
        ssh $COORDINATOR "$CMD" > /dev/null 2>&1 &

        echo "Starting servers for run $RUN..."
        NUM_BACKUPS="0"
        NUM_MASTERS="0"
        for s in $SERVERS; do
          CMD="sudo $RAMCLOUD_BIN/server \
              -C $COORD_LOCATOR \
              -L ${LOCATOR} \
              --clusterName=__unnamed__ \
              --dpdkPort 1 \
              -f /dev/nvme0n1
              --segmentFrames 11000 \
              --maxNonVolatileBuffers 20 \
              --detectFailures 0 \
              --timeout 10000 \
              -r 3 \
              -t $SERVER_MEMORY \
              -E 3 \
              -w 1 \
              --maxCores 16 \
              --logCleanerThreads 2 \
              --cleanerBalancer=tombstoneRatio:0.40 \
              --preferredIndex $((NUM_MASTERS + 1)) \
              > $LOG_SUBDIR/server-$s.log 2>&1"
          ssh $s "$CMD" > /dev/null 2>&1 &
          NUM_MASTERS=$((NUM_MASTERS + 1))
          NUM_BACKUPS=$((NUM_BACKUPS + 1))
        done

        if $RAMCLOUD_BIN/ensureServers -C $COORD_LOCATOR \
            --masters $NUM_MASTERS --backups $NUM_BACKUPS --wait 20 \
            > $LOG_SUBDIR/ensureServers.log 2>&1; then
          true
        else
          echo "Cluster didn't startup correctly; see $LOG_SUBDIR/ensureServers.log"
          ssh $COORDINATOR sudo pkill coordinator
          for s in $SERVERS; do
            ssh $s sudo pkill server
          done
          exit 1
        fi

        # Load the dataset for the run
        echo "Filling the key-value store for run $RUN..."
        ./helper $COORD_LOCATOR logMessage NOTICE \
            "**** Filling the key-value store for run $RUN"
        ./fill.sh $WD $COORD_LOCATOR $LOG_SUBDIR "$CLIENTS"
        ./helper $COORD_LOCATOR logMessage NOTICE \
            "**** Finished filling the key-value store"

        # Figure out which of the clients to use
        COUNT=0
        USE_CLIENTS=""
        for CLIENT in $CLIENTS; do
          if [ $COUNT -lt $CLIENT_COUNT ]; then
            USE_CLIENTS="$USE_CLIENTS $CLIENT"
          fi
          COUNT=$((COUNT + 1))
        done

        # Run the measurement workloads
        for WORKLOAD in $WORKLOADS; do
          echo "Running workload $WORKLOAD for run $RUN..."
          ./helper $COORD_LOCATOR logMessage NOTICE \
              "**** Running workload $WORKLOAD for run $RUN"
          mkdir $LOG_SUBDIR/workload$WORKLOAD
          ./run.sh $WD $LOG_SUBDIR/workload$WORKLOAD $COORD_LOCATOR \
              workload${WORKLOAD} "$USE_CLIENTS"
        done
        ./helper $COORD_LOCATOR logMessage NOTICE "**** Workloads finished"

        # Kill all servers
        echo "Killing servers for run $RUN..."
        ssh $COORDINATOR sudo pkill coordinator
        for s in $SERVERS; do
          ssh $s sudo pkill server
        done

        # Leave a bit of time for servers to really exit before the next run
        # (not sure why this is needed...)
        sleep 5
      done
    done
  done
done

# Print statistics
./printStats.py $LOG_DIR | tee $LOG_DIR/stats
